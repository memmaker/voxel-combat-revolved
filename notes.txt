# Annoying Bugs / Issues / Code Smells
 - Cannot look inside buildings with roofs
 - Own unit not visually dying, when hit by enemy units during fps view
 - Try Using IMgui (https://github.com/AllenDang/giu) for the editor?

# On Smoke
 - Smoke needs to be managed server side
 - Smoke needs to be rendered client side
 - Smoke should interact with bullets & explosions


# Design Guidelines
 - Turn based
 - Free aim
 - No unit collisions
 - Big units
 - Animations
 - Data driven

# Next Steps
 - Mission Objectives
 - Melee
 - Line Drawing (Paths & Line Of Sight)
 - Make shots look good
 - Grenades: Arc drawing (Grenade throwing)
 - Explosions & Blood: Particle effects (Explosions & blood)
 - Lighting (Shadows?)
 - Emissive Materials (Glow / Bloom Effects)
 - Outlines for Bodyparts & Units (Targeting)

# Known low priority issues
 - Diagonal Movement is choppily animated during climbs and drops
   -> The animation for climbing and dropping expects a cardinal direction

# Flaws of turn-based XCOM style games in general
 - Boring movement when there is no enemy in sight
   -> Start with enemies in sight
   -> Speed up initial movement
 - Nothing to do during the enemy turn
   -> Add activity during enemy turn
 - Stormtrooper effect: No one hits anything
   -> Increase accuracy, reduce damage dealt (shields, armor)
 - General slowness
   -> Allow for disabling/speedup of animations
   -> Efficient UI/UX
   -> Small maps and small teams
 - Too complex or not complex enough, too many or not enough options

# Where Phoenix Point failed
 - Difficulty curve / Balance
 - Too much happening at once / Too many systems
 - Progression -> Tech Tree & Research (downgrades..)
 - Ability design (mind control, invisibility, re-animation, war scream, quick aim, dash..)
 - One best, winning strategy is available (OP soldiers)
 - Too much micromanagement (no automation)

# Overwatch - Reaction fire
 - Player can select dedicated block positions to watch
 - Watched positions must be in line of sight
 - high base penalty to hit accuracy (eg. 20%)
 - but will deal extra damage if it hits (eg. 10%)
 - Each additional watched position costs more action points & will reduce the chance to hit
 - Units in overwatch being attacked from positions they don't watch, receive additional damage on hit
   - Only adjacent positions can be watched
 - Only usable once per unit per combat encounter


# Mission Objectives
 - Kill all enemies - DUH
 - Kill specific enemy units/NPCs/VIPs
 - Capture specific enemy units/NPCs/VIPs
 - Destroy/Capture/Defend McGuffin
 - Survive for X turns
 - Reach specific location
 - Transport specific item to specific location
 - Capture the flag / King of the hill / Domination

# Design goals
 - Tactical decision making
 - Art of war
 - Deception - Smoke & Mirrors
   - Smoke grenades
   - Create walls and remove them
   - Feign death, retreat, etc.
 - Yomi - Reading the mind of the opponent
   - Anticipate the opponents next move
   -> Overwatch
   -> Shield deployment
   -> Dodge movement
   -> Parry / deflect

# Core Mechanics
 - Bullets are ray-traced in 3D against environment and models
 - Line of Sight is ray-traced in 3D against environment and center of cells
 - Units have a body with multiple body parts, damage is applied to body parts individually
 - Units that can see each other and are near put "pressure" on each other, some Weapons & Skills are affected by pressure
 - Units have action points that can be used to move, attack, etc.
 - Attacking usually ends the turn

# On Balance
 - Tradeoffs & Power Budgets
 - No First Order Optimal Strategies
 - Counter play (Rock, Paper, Scissors) for everything
 - Don't balance into mediocrity, make everything OP
 - Hands vs. Throws (What you pick before vs. what you use during the fight)

# Random Cool ideas
 - Bleeding out instead of instant death
 - Bullet Cam for Sniper Shots (Slow Motion?)
 - Asymmetric multiplayer - One player is the attacker, the other the defender
 - Multiple Win & Loose Conditions, different ones for each player
 - Random limitations - eg. No grenades, no overwatch, etc.
 - Loadout Crates in the map to adapt to the situation
 - Rush mode - Move fast until you encounter the enemy
 - Moving maps - eg. Starship, Train, etc.
 - Create oil, throw cigarette, ignite oil
 - Add a "prod" action
 - Stances - eg. Crouching, Prone, etc.
   -> Dodging mechanic, choose a dodge stance for a specific AP price (eg. Neo backwards dodge), that will be executed when attacked
 - Shields & Armor
 - Ammo Variants - eg. Armor Piercing, Hollow Point, etc.
 - Scout drones
 - Heroes & Cowards - With instant in-game effects attached to them
 - Blood God bonus - When a unit dies, a random bonus is given to a random unit of the same faction

# Client - Server
 - Server & Clients share the same board and the same pieces, but with different states
 - Both share core game logic through the GameInstance and UnitInstance
 - Additionally, any "Dungeon Master" type simulation logic is only run on the server
   - eg. Raycasting for projectiles and line of sight
 - Clients are responsible for input & output and receive state changes from the server while sending player actions to the server

 - Server is authoritative
 - Server has GameInstance and UnitInstance information
 - Server will publish an initial state to the clients
 - Clients will send actions to the server
 - Server will validate and apply changes to the GameInstance
 - Server sends commands for the clients to apply the same changes to their GameInstance
 - Clients will add animations and apply the changes to their GameInstance


# Particles
 - We probably want to use TransformFeedback:
 - https://mathweb.ucsd.edu/~sbuss/MathCG2/OpenGLsoft/ParticlesTransformFeedback/PTFexplain.html
 - https://ogldev.org/www/tutorial28/tutorial28.html
 - https://www.youtube.com/watch?v=ro4bDXcISms
 - https://www.youtube.com/watch?v=OYYZQ1yiXOE


# We need
 - OpenGL Rendering Pipeline - DONE
 - 3D DDA Raycasting - DONE
 - Greedy Meshing - DONE
 - Dijkstra Pathfinding - DONE
 - GLTF Model Loading & Animation - DONE
 - Voxel Editing, Saving & Loading - DONE
 - Networked Multiplayer & Standalone Multihreaded Singleplayer - DONE
 - FPS & ISO Camera - DONE
 - Circle drawing (Targeting reticule) - DONE
 - Line Drawing (Paths & Line Of Sight) - DONE
 - Arc drawing (Grenade throwing)
 - Particle effects (Explosions & blood) - DONE
 - Lighting (Shadows?)
 - Outlines for Bodyparts & Units (Targeting)
 - Smooth camera movement (Zooming & Panning) - DONE
 - Data driven (Units, Items, Maps)

# Sliders style setting / story

You start with one custom character - Your avatar

You fight tactical battles in parallel universes
 -> Gives us the option to basically have a different game for each universe

You always have a choice inside the universe
 -> Will unlock new characters, items, etc. DEPENDING on your choices
 -> Will also determine the outcome of the universe

You can level up your characters
 -> Will unlock new skills, items, etc.

# Basics
 - Text rendering
 - Debug Primitive rendering

# Questions to self
 - Should I be doing indexed draw calls? Throwing the indices away might not be clever?
 - What really is batching & instancing?
 -

# Bugs
 - When removing a block at the edge of a chunk, the neighboring chunk is not re-meshed and may miss a face.


# Sun Tzu

18. All warfare is based on deception.

19. Hence, when able to attack, we must seem unable; when using our forces, we must seem inactive; when we are near, we must make the enemy believe we are far away; when far away, we must make him believe we are near.

20. Hold out baits to entice the enemy. Feign disorder, and crush him.

21. If he is secure at all points, be prepared for him. If he is in superior strength, evade him.

22. If your opponent is of choleric temper, seek to irritate him. Pretend to be weak, that he may grow arrogant.

23. If he is taking his ease, give him no rest. If his forces are united, separate them.

24. Attack him where he is unprepared, appear where you are not expected.

# Level Workflow

1. Acquire Minecraft build
2. use jMC2Obj to convert Minecraft build to OBJ (Hack it to also export the collision array?)
3. Load it in Blender
4. Merge textures (bake) & create collision mesh

# OpenGL Performance Checks

Try rendering a really small window, if that helps it is the fragment shader that is the bottleneck.
Try using a really simple vertex shader, if that helps it is the vertex shader that is the bottleneck.

Look at this:
https://github.com/nothings/stb/blob/master/stb_voxel_render.h

https://veloren.net/
https://openspades.yvt.jp/
https://wolkenwelten.net/

Switch to Godot?
https://github.com/Zylann/godot_voxel
Or Minetest?
https://www.minetest.net/


# Basic Knowledge
 - Buffer Objects are just blocks of memory on the GPU
 - Arrays have attributes and use an active buffer object
 - Transformation matrices are calculated in SRT order
 - MGL matrix multiplication is column major, so the matrices are multiplied from right to left
 - A camera view matrix is the inverse of a transformation matrix
 - The inverse of the product of matrices is equal to the product of the inverses in reverse order
   -> (AB)^-1 = B^-1 * A^-1 damn..

GUNS
-> https://github.com/pWn3d1337/Techguns2/tree/master/src/main/resources/assets/techguns/models/item


## Nice Stuff and Inspiration
UUhh: https://github.com/johanhenriksson/goworld

## Current Obstacles

### Broad-phase collision detection using spatial partitioning

### Exact collision detection of convex polyhedra
https://blog.winter.dev/2020/gjk-algorithm/
https://blog.winter.dev/2020/epa-algorithm/

### Pathfinding
https://github.com/arl/go-detour
https://ubm-twvideo01.s3.amazonaws.com/o1/vault/gdc2018/presentations/Alain_Benoit_HierarchicalDynamicPathfinding.pdf

### Occlusion Culling
https://bazhenovc.github.io/blog/post/gpu-driven-occlusion-culling-slides-lif/
https://github.com/GameTechDev/MaskedOcclusionCulling
https://www.gdcvault.com/play/1017837/Why-Render-Hidden-Objects-Cull
https://github.com/rawrunprotected/rasterizer/tree/master
http://procworld.blogspot.com/2015/08/voxel-occlusion.html
https://fgiesen.wordpress.com/2013/02/11/depth-buffers-done-quick-part/
https://www.intel.com/content/www/us/en/developer/articles/technical/software-occlusion-culling.html

Idea: Use greedy meshing without taking into account textures to generate occluder quads.
      Use the software rasterizer depth-buffer technique for occlusion culling.

### LOD

https://transvoxel.org/

### Occlusion Libs
https://github.com/gigc/Janua
https://github.com/GnosticOccultist/Janus
https://github.com/SungJJinKang/EveryCulling
https://github.com/potato3d/vdlib
https://github.com/87andrewh/CornerCulling		- csgo specific
https://github.com/fatkas/coverage-occlusion
https://github.com/LogisticsCraft/OcclusionCulling - looks like a weird n^3 algorithm
https://github.com/Prographers/Precomputed-Culling - unity specific

### Simplified Ambient Occlusion
https://0fps.net/2013/07/03/ambient-occlusion-for-minecraft-like-worlds/
https://playspacefarer.com/ambient-occlusion/

SIMD Vector Math
https://github.com/viterin/vek

Minecraft:
https://github.com/Marcelektro/MCP-919/tree/main

And clones:
https://github.com/Vekteur/clonecraft (includes swept AABB collision)
https://www.cse.chalmers.se/~uffe/bachelor/kandidatarbetestartpaket/Final-Voxelspel.pdf
https://github.com/minetest
https://github.com/cubzh/cubzh
http://giga.cps.unizar.es/~varella/kubex/index.html

## More or less solved now..

### Raytracing (3D DDA)
https://github.com/fenomas/fast-voxel-raycast/blob/master/index.js
https://github.com/francisengelmann/fast_voxel_traversal/blob/master/main.cpp
https://github.com/cgyurgyik/fast-voxel-traversal-algorithm/blob/master/amanatidesWooAlgorithm.cpp
https://github.com/Yours3lf/voxel_dda/blob/master/voxel_dda.cpp

### Meshing (Greedy Meshing)
https://blackflux.wordpress.com/2014/02/23/meshing-in-voxel-engines-part-1/
https://github.com/Vercidium/voxel-mesh-generation
https://nickmcd.me/2021/04/04/high-performance-voxel-engine/

### Collision AABB vs Voxels / AABB & AABB (Swept AABB using Minkowski Difference)
https://luisreis.net/blog/aabb_collision_handling/
https://blog.hamaluik.ca/posts/swept-aabb-collision-using-minkowski-difference/

### The Quake Engine Route
https://github.com/samuelyuan/go-quake2
https://github.com/c-d-a/io_export_qmap
https://github.com/qbism/q2tools-220

### Q2 Engines
https://github.com/skullernet/q2pro
https://github.com/jdolan/quake2

### Q3
https://github.com/ioquake/ioq3

### Source Engines
https://github.com/Galaco/kero
https://github.com/headcrab-junkyard/OGS

### Doom3 Engine
https://github.com/fabiensanglard/Doom3-for-MacOSX-
https://github.com/RobertBeckebans/RBDOOM-3-BFG

### Making a thief game out of doom3
https://github.com/stgatilov/darkmod_src

### Qodot
https://github.com/QodotPlugin/Qodot/